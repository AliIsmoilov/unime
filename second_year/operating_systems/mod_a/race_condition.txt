

üèÅ What is a Race Condition?

    ‚Ä¢   Race Condition its' one of the most common and tricky bugs in concurrent programming
    ‚Ä¢   A Race Condition occurs when two or more threads/processes access shared data at the
        same time, and the final outcome depends on the order in which they execute
    ‚Ä¢   Order of the processes/threads are unpreadictable or unordered, that's why
        the behavior of the program becomes inconsistent and often incorrect.


‚ö†Ô∏è Why is it called a "race"? 
    ‚Ä¢   Think of two threads as racing to access or modify the same data.
        Whoever gets there first "wins", and that changes the result.
    ‚Ä¢   But since the CPU might schedule threads differently every time, 
        the result of the "race" can change each time.



üìâ Example of a Race Condition
    
    simple C code:
    
    int counter = 0;

    void increment() {
        counter = counter + 1;
    }

    If two threads run this at the same time, they might both read the same value, say 5, and then both write 6.
    So even though the counter was incremented twice, the value only increased by 1.
    This is a race condition.



üß† Real-Life Analogy:

    Imagine two people updating a whiteboard:

    Person A sees the number 5 and wants to add 1.
    Person B also sees 5 and wants to add 1.
    A and B both write 6.
    
    Now you've lost an increment - same idea with variables in code.